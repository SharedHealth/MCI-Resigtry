#!/bin/sh
#
# mci        This shell script takes care of starting and stopping
#              the mci system
#
# chkconfig: - 64 36
# description: The mci shared health record system
# processname: mci
# config: /etc/default/mci
# pidfile: /var/run/mci/mci.pid
### BEGIN INIT INFO
# Provides: mci
# Required-Start: $local_fs $remote_fs $network $named $syslog $time
# Required-Stop: $local_fs $remote_fs $network $named $syslog $time
# Short-Description: start and stop mci system,
# Description: mci system
### END INIT INFO

. /etc/rc.d/init.d/functions

NAME="mci"
pid_file="/var/run/$NAME/$NAME.pid"
log_file="/var/log/$NAME/$NAME.log"
PROG_FILE="/opt/mci/lib/mci-api.war"

CUR_USER=`/usr/bin/whoami`

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

show_message() {
    echo $1
}

check_proc() {
    /usr/bin/pgrep -u $CUR_USER -f "$PROG_FILE" >/dev/null
}

case "$1" in
    start)
        if [ "${CUR_USER}" != "root" ] ; then
          show_message "MCI Server can only be started as 'root'."
          exit 4
        fi

        check_proc
        if [ $? -eq 0 ]; then
            echo "$?"
            log_success_msg "MCI Server already running on port $MCI_PORT"
            exit 0
        fi

        # MCI startup
        echo -n "Starting MCI: "
        nohup java -Dserver.port=$MCI_PORT -jar $PROG_FILE > /var/log/mci/mci.log &
        echo $! > $pid_file
        echo "OK"
        ;;
    stop)
        # MCI shutdown
        #Instead of dependending on pid file search for running process
        PID=`/usr/bin/pgrep -u $CUR_USER -f "$PROG_FILE"`

        if [[ -z "$PID" ]]; then
            show_message "MCI Server is not running"
            echo "" > $pid_file
            exit 0
        fi

        echo -n "Shutdown MCI: "
        su $CUR_USER -c "kill $PID"
        for t in `seq 40`; do $0 status > /dev/null 2>&1 && sleep 0.5 || break; done
        sleep 5
        echo "OK"
        echo "" > $pid_file
        ;;
    reload|restart)
        $0 stop
        $0 start
        ;;
    status)
        status -p $pid_file mci
        exit $?
        ;;
    *)
        echo "Usage: `basename $0` start|stop|status|restart|reload"
        exit 1
esac
exit 0
